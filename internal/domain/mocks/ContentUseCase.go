// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/meroedu/meroedu/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// ContentUseCase is an autogenerated mock type for the ContentUseCase type
type ContentUseCase struct {
	mock.Mock
}

// CreateContent provides a mock function with given fields: ctx, Content
func (_m *ContentUseCase) CreateContent(ctx context.Context, Content *domain.Content) error {
	ret := _m.Called(ctx, Content)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Content) error); ok {
		r0 = rf(ctx, Content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx, start, limit
func (_m *ContentUseCase) GetAll(ctx context.Context, start int, limit int) ([]domain.Content, error) {
	ret := _m.Called(ctx, start, limit)

	var r0 []domain.Content
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []domain.Content); ok {
		r0 = rf(ctx, start, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Content)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, start, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *ContentUseCase) GetByID(ctx context.Context, id int64) (domain.Content, error) {
	ret := _m.Called(ctx, id)

	var r0 domain.Content
	if rf, ok := ret.Get(0).(func(context.Context, int64) domain.Content); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Content)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContent provides a mock function with given fields: ctx, Content, id
func (_m *ContentUseCase) UpdateContent(ctx context.Context, Content *domain.Content, id int64) error {
	ret := _m.Called(ctx, Content, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Content, int64) error); ok {
		r0 = rf(ctx, Content, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
